version: '3.8'

services:
  # MyNodeCP Application
  mynodecp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mynodecp-app
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - DATABASE_HOST=mariadb
      - DATABASE_PORT=3306
      - DATABASE_NAME=mynodecp
      - DATABASE_USERNAME=mynodecp
      - DATABASE_PASSWORD=mynodecp_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - SERVER_ENVIRONMENT=production
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - mynodecp_data:/app/data
      - mynodecp_logs:/app/logs
    networks:
      - mynodecp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MariaDB Database
  mariadb:
    image: mariadb:10.11
    container_name: mynodecp-mariadb
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=mynodecp
      - MYSQL_USER=mynodecp
      - MYSQL_PASSWORD=mynodecp_password
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./deployments/mariadb/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - mynodecp-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mynodecp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployments/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - mynodecp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mynodecp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/nginx/conf.d:/etc/nginx/conf.d
      - ./deployments/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - mynodecp
    networks:
      - mynodecp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mynodecp-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mynodecp-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mynodecp-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
      - ./deployments/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - mynodecp-network
    depends_on:
      - prometheus

  # Log Management with Loki
  loki:
    image: grafana/loki:latest
    container_name: mynodecp-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./deployments/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - mynodecp-network
    command: -config.file=/etc/loki/local-config.yaml

  # Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: mynodecp-promtail
    restart: unless-stopped
    volumes:
      - ./deployments/promtail/promtail.yml:/etc/promtail/config.yml
      - mynodecp_logs:/var/log/mynodecp:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - mynodecp-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml

# Networks
networks:
  mynodecp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  mynodecp_data:
    driver: local
  mynodecp_logs:
    driver: local
  mariadb_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
